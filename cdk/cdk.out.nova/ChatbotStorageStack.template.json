{
 "Resources": {
  "DocumentsBucket9EC9DEB9": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "BucketName": {
     "Fn::Join": [
      "",
      [
       "chatbot-documents-",
       {
        "Ref": "AWS::AccountId"
       },
       "-",
       {
        "Ref": "AWS::Region"
       }
      ]
     ]
    },
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "GET",
        "POST",
        "PUT",
        "DELETE"
       ],
       "AllowedOrigins": [
        "*"
       ],
       "MaxAge": 3000
      }
     ]
    },
    "LifecycleConfiguration": {
     "Rules": [
      {
       "Id": "DeleteOldVersions",
       "NoncurrentVersionExpiration": {
        "NoncurrentDays": 30
       },
       "Status": "Enabled"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/DocumentsBucket/Resource"
   }
  },
  "DocumentsBucketPolicy1F991BD4": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "DocumentsBucket9EC9DEB9"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "DocumentsBucket9EC9DEB9",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "DocumentsBucket9EC9DEB9",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/DocumentsBucket/Policy/Resource"
   }
  },
  "DocumentsBucketAutoDeleteObjectsCustomResourceFE3123FC": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "DocumentsBucket9EC9DEB9"
    }
   },
   "DependsOn": [
    "DocumentsBucketPolicy1F991BD4"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/DocumentsBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "DocumentsBucketNotifications871115F2": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "DocumentsBucket9EC9DEB9"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".pdf"
          },
          {
           "Name": "prefix",
           "Value": "uploads/"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "DocumentProcessor3D49A083",
         "Arn"
        ]
       }
      },
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".txt"
          },
          {
           "Name": "prefix",
           "Value": "uploads/"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "DocumentProcessor3D49A083",
         "Arn"
        ]
       }
      },
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".docx"
          },
          {
           "Name": "prefix",
           "Value": "uploads/"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "DocumentProcessor3D49A083",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true,
    "SkipDestinationValidation": false
   },
   "DependsOn": [
    "DocumentsBucketAllowBucketNotificationsToChatbotStorageStackDocumentProcessorC79EA5430C65D0F1",
    "DocumentsBucketPolicy1F991BD4"
   ],
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/DocumentsBucket/Notifications/Resource"
   }
  },
  "DocumentsBucketAllowBucketNotificationsToChatbotStorageStackDocumentProcessorC79EA5430C65D0F1": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "DocumentProcessor3D49A083",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "DocumentsBucket9EC9DEB9",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/DocumentsBucket/AllowBucketNotificationsToChatbotStorageStackDocumentProcessorC79EA543"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "DocumentsBucket9EC9DEB9"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6",
    "aws:asset:property": "Code"
   }
  },
  "ProcessedDocumentsBucket0748053A": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "BucketName": {
     "Fn::Join": [
      "",
      [
       "chatbot-processed-docs-",
       {
        "Ref": "AWS::AccountId"
       },
       "-",
       {
        "Ref": "AWS::Region"
       }
      ]
     ]
    },
    "LifecycleConfiguration": {
     "Rules": [
      {
       "Id": "TransitionToIA",
       "Status": "Enabled",
       "Transitions": [
        {
         "StorageClass": "STANDARD_IA",
         "TransitionInDays": 30
        },
        {
         "StorageClass": "GLACIER",
         "TransitionInDays": 90
        }
       ]
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/ProcessedDocumentsBucket/Resource"
   }
  },
  "ProcessedDocumentsBucketPolicy8E3F76F6": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "ProcessedDocumentsBucket0748053A"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "ProcessedDocumentsBucket0748053A",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ProcessedDocumentsBucket0748053A",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/ProcessedDocumentsBucket/Policy/Resource"
   }
  },
  "ProcessedDocumentsBucketAutoDeleteObjectsCustomResourceBF64F865": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "ProcessedDocumentsBucket0748053A"
    }
   },
   "DependsOn": [
    "ProcessedDocumentsBucketPolicy8E3F76F6"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/ProcessedDocumentsBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "DocumentProcessorRole12EFF6D7": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "s3:DeleteObject",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutObject"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "DocumentsBucket9EC9DEB9",
            "Arn"
           ]
          },
          {
           "Fn::GetAtt": [
            "ProcessedDocumentsBucket0748053A",
            "Arn"
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "DocumentsBucket9EC9DEB9",
               "Arn"
              ]
             },
             "/*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "ProcessedDocumentsBucket0748053A",
               "Arn"
              ]
             },
             "/*"
            ]
           ]
          }
         ]
        },
        {
         "Action": [
          "bedrock:InvokeModel",
          "bedrock:InvokeModelWithResponseStream"
         ],
         "Effect": "Allow",
         "Resource": [
          "arn:aws:bedrock:*::foundation-model/amazon.titan-embed-text-v1",
          "arn:aws:bedrock:*::foundation-model/amazon.titan-embed-text-v2"
         ]
        },
        {
         "Action": "cloudwatch:PutMetricData",
         "Effect": "Allow",
         "Resource": "*"
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "DocumentProcessorPermissions"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/DocumentProcessorRole/Resource"
   }
  },
  "DocumentProcessor3D49A083": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "ff5c749aae928b4c3ef4b47e43b3cfeb8c74bc259613ff85cc052f9bbfef9983.zip"
    },
    "Description": "Process uploaded documents for RAG search",
    "Environment": {
     "Variables": {
      "DOCUMENTS_BUCKET": {
       "Ref": "DocumentsBucket9EC9DEB9"
      },
      "PROCESSED_BUCKET": {
       "Ref": "ProcessedDocumentsBucket0748053A"
      },
      "BEDROCK_REGION": {
       "Ref": "AWS::Region"
      },
      "EMBEDDING_MODEL": "amazon.titan-embed-text-v1",
      "BEDROCK_INFERENCE_PROFILE_ARN": "",
      "BEDROCK_CROSS_REGION_PROFILE": "",
      "CHUNK_SIZE": "1000",
      "CHUNK_OVERLAP": "200",
      "LOG_LEVEL": "INFO"
     }
    },
    "Handler": "handler.lambda_handler",
    "MemorySize": 1024,
    "Role": {
     "Fn::GetAtt": [
      "DocumentProcessorRole12EFF6D7",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 900
   },
   "DependsOn": [
    "DocumentProcessorRole12EFF6D7"
   ],
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/DocumentProcessor/Resource",
    "aws:asset:path": "asset.ff5c749aae928b4c3ef4b47e43b3cfeb8c74bc259613ff85cc052f9bbfef9983",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "DocumentsBucket9EC9DEB9",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications = sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj, dict):\n      return json_obj\n  for key, value in json_obj.items():\n      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item) for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.13",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "DocumentUploadRole76486D80": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:PutObjectAcl"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            {
             "Fn::GetAtt": [
              "DocumentsBucket9EC9DEB9",
              "Arn"
             ]
            },
            "/uploads/*"
           ]
          ]
         }
        },
        {
         "Action": [
          "s3:GetObject",
          "s3:PutObject"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            {
             "Fn::GetAtt": [
              "DocumentsBucket9EC9DEB9",
              "Arn"
             ]
            },
            "/*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "DocumentUploadPermissions"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/DocumentUploadRole/Resource"
   }
  },
  "DocumentUploadHandlerA7645B2A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "4e60e932cf87b4235dfe9892ea1b61c31f7024db0acbfab7d8e6a9f8c54e6724.zip"
    },
    "Description": "Handle document upload requests and generate presigned URLs",
    "Environment": {
     "Variables": {
      "DOCUMENTS_BUCKET": {
       "Ref": "DocumentsBucket9EC9DEB9"
      },
      "UPLOAD_PREFIX": "uploads/",
      "MAX_FILE_SIZE": "50000000",
      "ALLOWED_EXTENSIONS": "pdf,txt,docx,md",
      "PRESIGNED_URL_EXPIRY": "3600",
      "LOG_LEVEL": "INFO"
     }
    },
    "Handler": "handler.lambda_handler",
    "MemorySize": 256,
    "Role": {
     "Fn::GetAtt": [
      "DocumentUploadRole76486D80",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 30
   },
   "DependsOn": [
    "DocumentUploadRole76486D80"
   ],
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/DocumentUploadHandler/Resource",
    "aws:asset:path": "asset.4e60e932cf87b4235dfe9892ea1b61c31f7024db0acbfab7d8e6a9f8c54e6724",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "DocumentProcessingRule8CD93328": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Handle document processing status updates",
    "EventPattern": {
     "detail-type": [
      "Document Processing Status"
     ],
     "source": [
      "chatbot.document.processor"
     ]
    },
    "State": "ENABLED"
   },
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/DocumentProcessingRule/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/1WPTU7DMBCFz9L9ZKDNArGkldgSpQeoXGcoQ2IbeexWleW749SBwup9782PPRvcrJ/xcaUu0uhhbCY+YtoHpUco0SFJi2kb9UgBdu92oSqdm1hf7/Hiq9kqoQyTMsdBYSo9HXnDIuwsvEarwwwl/uEMrAym3k00xze9P1Apg7QHJUJB8GUWoDPZYlIfl7GiOcMuSnCmJ3HR61r45X+lzrszD+Tn38JtZTn9xPYEf4ffYviKIUN3DR/OPrS4bvFp9SnMjY82sCHsq34DYhc5I04BAAA="
   },
   "Metadata": {
    "aws:cdk:path": "ChatbotStorageStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "DocumentsBucketName": {
   "Description": "S3 bucket name for RAG documents",
   "Value": {
    "Ref": "DocumentsBucket9EC9DEB9"
   },
   "Export": {
    "Name": "ChatbotDocumentsBucket"
   }
  },
  "DocumentsBucketArn": {
   "Description": "S3 bucket ARN for RAG documents",
   "Value": {
    "Fn::GetAtt": [
     "DocumentsBucket9EC9DEB9",
     "Arn"
    ]
   },
   "Export": {
    "Name": "ChatbotDocumentsBucketArn"
   }
  },
  "ProcessedDocumentsBucketName": {
   "Description": "S3 bucket name for processed document chunks",
   "Value": {
    "Ref": "ProcessedDocumentsBucket0748053A"
   },
   "Export": {
    "Name": "ChatbotProcessedDocumentsBucket"
   }
  },
  "DocumentProcessorArn": {
   "Description": "Document processor Lambda function ARN",
   "Value": {
    "Fn::GetAtt": [
     "DocumentProcessor3D49A083",
     "Arn"
    ]
   },
   "Export": {
    "Name": "ChatbotDocumentProcessorArn"
   }
  },
  "DocumentUploadHandlerArn": {
   "Description": "Document upload handler Lambda function ARN",
   "Value": {
    "Fn::GetAtt": [
     "DocumentUploadHandlerA7645B2A",
     "Arn"
    ]
   },
   "Export": {
    "Name": "ChatbotDocumentUploadHandlerArn"
   }
  },
  "DocumentUploadUrl": {
   "Description": "Base URL for document uploads",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "DocumentsBucket9EC9DEB9"
      },
      ".s3.",
      {
       "Ref": "AWS::Region"
      },
      ".amazonaws.com/uploads/"
     ]
    ]
   },
   "Export": {
    "Name": "ChatbotDocumentUploadUrl"
   }
  },
  "ExportsOutputFnGetAttProcessedDocumentsBucket0748053AArnC4CD5E76": {
   "Value": {
    "Fn::GetAtt": [
     "ProcessedDocumentsBucket0748053A",
     "Arn"
    ]
   },
   "Export": {
    "Name": "ChatbotStorageStack:ExportsOutputFnGetAttProcessedDocumentsBucket0748053AArnC4CD5E76"
   }
  },
  "ExportsOutputRefProcessedDocumentsBucket0748053A42BFD98D": {
   "Value": {
    "Ref": "ProcessedDocumentsBucket0748053A"
   },
   "Export": {
    "Name": "ChatbotStorageStack:ExportsOutputRefProcessedDocumentsBucket0748053A42BFD98D"
   }
  },
  "ExportsOutputRefDocumentsBucket9EC9DEB9131399C0": {
   "Value": {
    "Ref": "DocumentsBucket9EC9DEB9"
   },
   "Export": {
    "Name": "ChatbotStorageStack:ExportsOutputRefDocumentsBucket9EC9DEB9131399C0"
   }
  },
  "ExportsOutputFnGetAttDocumentProcessor3D49A083ArnB97F8912": {
   "Value": {
    "Fn::GetAtt": [
     "DocumentProcessor3D49A083",
     "Arn"
    ]
   },
   "Export": {
    "Name": "ChatbotStorageStack:ExportsOutputFnGetAttDocumentProcessor3D49A083ArnB97F8912"
   }
  },
  "ExportsOutputFnGetAttDocumentUploadHandlerA7645B2AArnF0832A60": {
   "Value": {
    "Fn::GetAtt": [
     "DocumentUploadHandlerA7645B2A",
     "Arn"
    ]
   },
   "Export": {
    "Name": "ChatbotStorageStack:ExportsOutputFnGetAttDocumentUploadHandlerA7645B2AArnF0832A60"
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-3"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-4"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      }
     ]
    },
    {
     "Fn::Equals": [
      {
       "Ref": "AWS::Region"
      },
      "us-west-2"
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}